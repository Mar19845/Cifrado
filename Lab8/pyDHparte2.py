import pyDH
import hmac
import hashlib
#resultado d1 <pyDH.pyDH.DiffieHellman object at 0x0000020D54A7FEE0>
#predefrnir un  primo y construir un generador d1 calcula la potencia de g a la a
#21386147990689131804096242191407514178416222066674015765170288757534116532363069306733944479239361060908992703541019452422084394434144806779527717713304082138997521446417056706092161419985004750107721206072326255181446626489180822438777606951364274024220436300546991857498775648799709495523295209822723449900748133163494013526881853433037438367395827146178077246069329672344173059383061351671823789974675022642905554520841087674044262062401162322026640221128434469128157107935355861006743038715050725793299493425711715205766671412633426029421771728587176287891603738944375435439057333244225229525180498827415679796136

d1 = pyDH.DiffieHellman(14)
d2 = pyDH.DiffieHellman(14)
d1_pubkey = d1.gen_public_key()
d2_pubkey = d2.gen_public_key()

#generar la clave secreta con la otra
d1_sharedkey = d1.gen_shared_key(d2_pubkey)
d2_sharedkey = d2.gen_shared_key(d1_pubkey)

print("resultado d1", d1_pubkey)
print("")
print("")

print(d1_pubkey,'\n\n',d2_pubkey)
print(d1_sharedkey,' and ',d2_sharedkey)

